// 全局启用Kotlin

ext {
    def ver = rootProject.with { if (it.hasProperty('dependencies_ver')) it.dependencies_ver }
    kotlin_version = ver?.get('kotlin_version') ?: '1.3.61'
    kotlin_coroutines = ver?.get('kotlin_coroutines') ?: '1.3.3'
}

subprojects {

    project.plugins.all {
        def pluginName = it.getClass().name
        //println "project $project.name, ${pluginName}"
        switch (pluginName) {
            case 'com.android.build.gradle.AppPlugin':
            case 'com.android.build.gradle.LibraryPlugin':
                //println "project $project.name, ${it.getClass().name}"

                project.with {
                    // 给所有Android模块添加Kotlin插件
                    apply plugin: 'kotlin-android'
                    apply plugin: 'kotlin-kapt'
                    apply plugin: 'kotlin-android-extensions'

                    android {
                        sourceSets {
                            main.java.srcDirs += ["src/main/kotlin"]
                            //main.java.srcDirs.each { it.mkdirs() }
                        }

                        // 打包apk排除文件
                        if (pluginName == 'com.android.build.gradle.AppPlugin') {
                            packagingOptions {
                                exclude '/kotlin/**.kotlin_metadata'
                            }
                        }
                    }

                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
                        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
                    }


                    // 注解处理器 annotationProcessor 转为 kapt
                    def KAPT = "kapt"
                    def KAPT_CAP = KAPT.capitalize()
                    def ANNOTATION_PROCESSOR = "annotationProcessor"
                    def ANNOTATION_PROCESSOR_CAP = ANNOTATION_PROCESSOR.capitalize()
                    configurations.all { Configuration conf ->
                        def conf_name = conf.name

                        def apt = conf_name.replace(ANNOTATION_PROCESSOR, KAPT).replace(ANNOTATION_PROCESSOR_CAP, KAPT_CAP)
                        if (conf_name == ANNOTATION_PROCESSOR || (conf_name.endsWith(ANNOTATION_PROCESSOR_CAP) && !conf_name.startsWith("_"))) {
                            //println "$project.name $conf_name, $apt"
                            conf.dependencies.all { Dependency dependency ->
                                def artifacts = "$dependency.group:$dependency.name:$dependency.version"
                                //println "$project.name, $conf_name, $artifacts"
                                if (dependency.group != ' androidx.databinding' && dependency.name != 'databinding-compiler') {
                                    project.dependencies {
                                        "$apt" artifacts
                                    }
                                }
                            }
                        }
                    }
                }
                break
            case 'org.gradle.api.plugins.JavaPlugin':
                project.with {
                    // 给所有Java模块添加Kotlin插件
                    apply plugin: 'kotlin'
                    apply plugin: 'kotlin-kapt'

                    sourceSets {
                        main.java.srcDirs += ["src/main/kotlin"]
                        //main.java.srcDirs.each { it.mkdirs() }
                    }

                    dependencies {
                        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
                    }


                    // 注解处理器 annotationProcessor 转为 kapt
                    def KAPT = "kapt"
                    def KAPT_CAP = KAPT.capitalize()
                    def ANNOTATION_PROCESSOR = "annotationProcessor"
                    def ANNOTATION_PROCESSOR_CAP = ANNOTATION_PROCESSOR.capitalize()
                    configurations.all { Configuration conf ->
                        def conf_name = conf.name

                        def apt = conf_name.replace(ANNOTATION_PROCESSOR, KAPT).replace(ANNOTATION_PROCESSOR_CAP, KAPT_CAP)
                        if (conf_name == ANNOTATION_PROCESSOR || (conf_name.endsWith(ANNOTATION_PROCESSOR_CAP) && !conf_name.startsWith("_"))) {
                            //println "$project.name $conf_name, $apt"
                            conf.dependencies.all { Dependency dependency ->
                                def artifacts = "$dependency.group:$dependency.name:$dependency.version"
                                //println "$project.name, $conf_name, $artifacts"
                                if (dependency.group != ' androidx.databinding' && dependency.name != 'databinding-compiler') {
                                    project.dependencies {
                                        "$apt" artifacts
                                    }
                                }
                            }
                        }
                    }
                }
                break
        }
    }

    // 强制修改依赖版本
    def useDependency = [
            ["org.jetbrains.kotlin", "kotlin-stdlib", kotlin_version],
            ["org.jetbrains.kotlinx", "kotlinx-coroutines", kotlin_coroutines],
    ]

    project.configurations.all { Configuration conf ->
        def conf_name = conf.name
        conf.resolutionStrategy.eachDependency { details ->
            //println "$project.name, $conf_name ${details.requested.with { "$group:$name:$version" }}"
            useDependency.each { item ->
                if (details.requested.with { group == item[0] && name.contains(item[1]) }) {
                    //println "$project.name, $conf_name ${details.requested.with { "$group:$name:$version --> ${item[2]}" }}"
                    details.useVersion item[2]//设置想要的版本
                }
            }
        }
    }

}